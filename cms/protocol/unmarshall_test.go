package protocol

import (
	"encoding/asn1"
	"encoding/base64"
	"fmt"
	asn "github.com/bukodi/go_S-MIME/asn1"
	"sync"
	"testing"
)

var data = []byte{0x30, 0x82, 0x1, 0x26, 0x2, 0x1, 0x2, 0x31, 0x81, 0xe2, 0xa1, 0x81, 0xdf, 0x2, 0x1, 0x3, 0xa0, 0x71, 0xa1, 0x6f, 0x30, 0x9, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x3, 0x62, 0x0, 0x4, 0x55, 0xa9, 0x63, 0x51, 0xaf, 0xcd, 0x9e, 0xa7, 0xe4, 0x3c, 0xd0, 0x76, 0x2c, 0x68, 0xc4, 0x7f, 0x7e, 0xdf, 0x27, 0x10, 0xd6, 0x27, 0x7c, 0xb1, 0x6a, 0xc4, 0xc3, 0x9e, 0x0, 0x86, 0x9c, 0xb1, 0xce, 0x16, 0xfd, 0xfd, 0xe5, 0x8, 0xfa, 0x98, 0x27, 0x22, 0xc1, 0xa6, 0x95, 0x32, 0x65, 0xa5, 0x8c, 0x2, 0x7e, 0xd0, 0x9f, 0xec, 0x31, 0xd1, 0x3b, 0x63, 0xdd, 0xd4, 0xe6, 0xf1, 0x9e, 0x7, 0x13, 0x5d, 0x51, 0x27, 0x50, 0x66, 0x9f, 0xe, 0xa3, 0x7e, 0xa, 0xd8, 0x6d, 0xa7, 0xb8, 0x8d, 0x10, 0xba, 0x99, 0xd4, 0xe0, 0x15, 0xff, 0x1b, 0x2f, 0xa5, 0xc6, 0xea, 0xdc, 0x2b, 0xc6, 0x54, 0x30, 0x18, 0x6, 0x9, 0x2b, 0x81, 0x5, 0x10, 0x86, 0x48, 0x3f, 0x0, 0x2, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x5, 0x30, 0x4d, 0x30, 0x4b, 0x30, 0x2f, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2, 0x8, 0x2b, 0xcf, 0x98, 0x46, 0xb4, 0x4d, 0x48, 0x18, 0x4, 0x18, 0x7b, 0xd2, 0x73, 0xdc, 0xc4, 0x4a, 0x4, 0xc2, 0x45, 0xeb, 0x11, 0xb4, 0xe, 0xf9, 0x4d, 0x6f, 0xf4, 0x9c, 0xe7, 0x55, 0xda, 0xd5, 0xaa, 0xae, 0x30, 0x3c, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0x30, 0x1d, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2, 0x4, 0x10, 0xc1, 0xb7, 0xae, 0x79, 0xa0, 0xdb, 0xa8, 0xa3, 0x35, 0x39, 0xdf, 0x3e, 0xb2, 0x61, 0x4f, 0x9c, 0x80, 0x10, 0x5d, 0xa9, 0x7b, 0x65, 0x6f, 0x38, 0x3, 0xed, 0x3d, 0x3b, 0x70, 0xa, 0xef, 0xe8, 0x7, 0x47}

func TestASN1Custom(t *testing.T) {
	ed := new(EnvelopedData)
	if rest, err := asn.Unmarshal(data, ed); err != nil {
		t.Error(err)
	} else if len(rest) > 0 {
		t.Error(ErrTrailingData)
	}
	t.Logf("asn test ended")
}

func TestASN1Lib(t *testing.T) {
	ed := new(EnvelopedData)
	if rest, err := asn1.Unmarshal(data, ed); err != nil {
		t.Error(err)
	} else if len(rest) > 0 {
		t.Error(ErrTrailingData)
	}
	t.Logf("asn1 test ended")
}

func TestUnmarshall(t *testing.T) {

	b64Data := base64.StdEncoding.EncodeToString(data)
	fmt.Printf("Data: \n%s\n", b64Data)

	wg := new(sync.WaitGroup)

	wg.Add(1)
	func() {
		defer wg.Done()

		ed := new(EnvelopedData)
		if rest, err := asn.Unmarshal(data, ed); err != nil {
			t.Error(err)
		} else if len(rest) > 0 {
			t.Error(ErrTrailingData)
		}
		t.Logf("asn test ended")
	}()

	wg.Add(1)
	func() {
		defer wg.Done()

		ed := new(EnvelopedData)
		if rest, err := asn1.Unmarshal(data, ed); err != nil {
			t.Error(err)
		} else if len(rest) > 0 {
			t.Error(ErrTrailingData)
		}
		t.Logf("asn1 test ended")
	}()

	wg.Wait()
}
