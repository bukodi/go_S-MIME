package go_S_MIME

import (
	"bytes"
	"crypto/tls"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/asn1"
	"encoding/base64"
	"fmt"
	asn "github.com/bukodi/go_S-MIME/asn1"
	"github.com/bukodi/go_S-MIME/cms"
	"github.com/bukodi/go_S-MIME/cms/protocol"
	"testing"
)

func TestCustomizedASN1Lib_sd(t *testing.T) {
	der := []byte{0x30, 0x82, 0x7, 0x34, 0x2, 0x1, 0x1, 0x31, 0xd, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1, 0x30, 0x19, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0xa0, 0xc, 0x4, 0xa, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x65, 0x6c, 0x74, 0xa0, 0x82, 0x5, 0x5e, 0x30, 0x82, 0x2, 0x43, 0x30, 0x82, 0x1, 0x2b, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x8, 0x62, 0x9c, 0x6b, 0xc0, 0x68, 0x88, 0x95, 0x68, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x39, 0x31, 0x34, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x6c, 0x65, 0x61, 0x66, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x76, 0x30, 0x10, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x5, 0x2b, 0x81, 0x4, 0x0, 0x22, 0x3, 0x62, 0x0, 0x4, 0x77, 0x4a, 0xd2, 0x20, 0xfe, 0x5e, 0xa6, 0x3, 0xe5, 0x18, 0x35, 0x85, 0xfe, 0xd7, 0x34, 0x28, 0x64, 0x5e, 0xd2, 0x9d, 0xd0, 0x97, 0x3c, 0x8e, 0xd2, 0x7f, 0x36, 0xf1, 0x99, 0x1e, 0x20, 0x0, 0x6a, 0x8e, 0xe9, 0x7f, 0xbb, 0xa4, 0xca, 0x70, 0x9f, 0xcb, 0x16, 0x4c, 0x57, 0x1c, 0xf7, 0xd4, 0x95, 0x99, 0xf8, 0x78, 0x2e, 0xf4, 0x2c, 0x88, 0x79, 0x20, 0x0, 0xe2, 0x2b, 0x15, 0x5, 0x15, 0x3a, 0x6d, 0xd1, 0xee, 0xf4, 0x4d, 0x4a, 0x6, 0xc3, 0xbc, 0xb7, 0x59, 0xf1, 0x77, 0x37, 0x1c, 0xba, 0xde, 0x22, 0xda, 0xe9, 0xea, 0xe7, 0x78, 0xf1, 0x9c, 0x6, 0xa, 0x95, 0x2e, 0x98, 0x52, 0xa3, 0x31, 0x30, 0x2f, 0x30, 0xc, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x2, 0x30, 0x0, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x18, 0x30, 0x16, 0x80, 0x14, 0x4c, 0xab, 0x93, 0x18, 0xdf, 0x33, 0x52, 0x3f, 0x1b, 0xda, 0xd, 0xd5, 0xb3, 0xd7, 0xfd, 0xb, 0xb4, 0x8f, 0x63, 0x74, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0xc5, 0xfe, 0xec, 0x93, 0xaf, 0x59, 0xab, 0x23, 0xcb, 0xa, 0x4b, 0x66, 0x3c, 0x78, 0x28, 0xd5, 0x65, 0x9d, 0x6a, 0xb6, 0x21, 0x68, 0xbb, 0x59, 0xb3, 0xb0, 0x5b, 0xcc, 0x43, 0x44, 0x96, 0x37, 0x57, 0xdf, 0x43, 0x88, 0x69, 0x44, 0x3a, 0x9a, 0x9, 0x2, 0xb2, 0xa1, 0x3a, 0xb8, 0xa5, 0xbd, 0x2c, 0x69, 0x21, 0xba, 0x37, 0x25, 0x53, 0x57, 0x40, 0x43, 0x76, 0x96, 0xe6, 0x9b, 0x38, 0xf9, 0x16, 0xae, 0x3, 0x63, 0xa6, 0x84, 0x20, 0x88, 0xb8, 0x82, 0x62, 0x36, 0x6a, 0xa9, 0xfd, 0x76, 0xe7, 0x94, 0xb4, 0x90, 0x8d, 0x12, 0xa9, 0xe4, 0x9f, 0xc, 0x90, 0xeb, 0x39, 0xb1, 0x4e, 0x1c, 0x32, 0xb5, 0x21, 0x11, 0xb3, 0xd5, 0xd, 0xc6, 0x93, 0x7d, 0xc8, 0x2c, 0x2c, 0xf4, 0xff, 0x2f, 0x70, 0x6f, 0x88, 0xf0, 0x90, 0xe1, 0x1a, 0x3b, 0x9f, 0xaf, 0xbd, 0x6e, 0x6c, 0x35, 0xbd, 0x7f, 0x5a, 0xee, 0x3d, 0x6a, 0xc6, 0x37, 0xb4, 0x15, 0x4a, 0x8b, 0x25, 0x78, 0x9e, 0x2, 0x8f, 0x18, 0x94, 0x8f, 0xc6, 0xe0, 0xe6, 0x3f, 0x59, 0xcd, 0xe1, 0x4d, 0x74, 0x30, 0xea, 0x47, 0xe6, 0x81, 0x23, 0x0, 0x57, 0xae, 0xaa, 0x7b, 0x48, 0xa3, 0xe6, 0xbb, 0x33, 0x3c, 0xae, 0xa9, 0x2c, 0x85, 0x18, 0x34, 0x81, 0xa1, 0xca, 0xe0, 0xb6, 0x14, 0x69, 0xde, 0x5f, 0xd0, 0xfb, 0xda, 0x66, 0x6c, 0x39, 0xfb, 0x4b, 0x3d, 0x92, 0xb9, 0xd8, 0x22, 0x1f, 0xcc, 0x93, 0x56, 0x8d, 0x99, 0xc8, 0x49, 0x74, 0x89, 0x3c, 0x29, 0x8b, 0xfc, 0xe8, 0x1a, 0x24, 0xb4, 0xef, 0x25, 0x92, 0x2b, 0x38, 0x34, 0xdf, 0x80, 0x90, 0xe, 0xb5, 0xbe, 0xef, 0xb, 0x25, 0x52, 0x28, 0x59, 0xd5, 0xbe, 0xb9, 0xbf, 0xfe, 0x1f, 0xe1, 0x68, 0xd, 0x5c, 0xc6, 0xe, 0xd8, 0x49, 0x51, 0x99, 0x64, 0xef, 0x4f, 0x42, 0x30, 0x82, 0x3, 0x13, 0x30, 0x82, 0x1, 0xfb, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x8, 0x18, 0xf3, 0xc2, 0xd3, 0x27, 0xb5, 0xe6, 0x7, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x39, 0x31, 0x34, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xd0, 0x3a, 0x3f, 0xe0, 0x10, 0xc0, 0xa2, 0x1e, 0xee, 0xd8, 0x32, 0xf4, 0x1d, 0x32, 0xa8, 0x55, 0x24, 0xd, 0xf9, 0x5c, 0xe3, 0x19, 0x5d, 0x9e, 0xd1, 0xa6, 0xa2, 0x32, 0x73, 0x34, 0x59, 0x46, 0x3d, 0x5d, 0x59, 0x48, 0xaa, 0xa9, 0x86, 0xec, 0x84, 0x26, 0xbc, 0xdf, 0x86, 0x40, 0xa7, 0x13, 0xab, 0xbb, 0x28, 0x79, 0x2a, 0x5a, 0xf7, 0xfd, 0xd1, 0xa5, 0x81, 0x2f, 0x9b, 0xff, 0xb4, 0x1e, 0xf1, 0x88, 0xdb, 0xc, 0xf4, 0x96, 0x85, 0x31, 0xd9, 0x3e, 0x99, 0x21, 0x3b, 0xf6, 0x13, 0xa6, 0x95, 0x2f, 0x5d, 0xf2, 0x79, 0x43, 0xd1, 0x7, 0xa1, 0x99, 0xb1, 0xdb, 0x63, 0x7f, 0x88, 0x3e, 0xef, 0xd2, 0x5a, 0xb5, 0x78, 0x98, 0xf3, 0xb3, 0x11, 0xc5, 0xe3, 0x2, 0xf9, 0xdd, 0xf8, 0xac, 0xbc, 0x47, 0xa0, 0xb7, 0x10, 0x5f, 0x72, 0x57, 0x83, 0x40, 0x9, 0x39, 0xaf, 0xde, 0x6e, 0x67, 0xe8, 0x54, 0xcb, 0x5b, 0x3d, 0x0, 0x30, 0xed, 0xc0, 0x8b, 0x66, 0x66, 0x7e, 0x76, 0x76, 0x1b, 0x55, 0x95, 0x92, 0x8e, 0xb0, 0x5c, 0x30, 0xa4, 0xcb, 0xb6, 0x5b, 0xb5, 0x8b, 0xd7, 0x8e, 0xce, 0xee, 0x31, 0x2c, 0xa9, 0x2, 0x6e, 0x61, 0x93, 0xf8, 0x2a, 0x8a, 0x54, 0x32, 0x79, 0x21, 0x78, 0x91, 0xaf, 0x95, 0x3b, 0xf5, 0x29, 0x19, 0x62, 0xd, 0x52, 0x81, 0xfd, 0x4c, 0x9e, 0x54, 0xad, 0xb2, 0x55, 0xd7, 0xe, 0x5d, 0x81, 0xbf, 0xf9, 0x65, 0xb1, 0x13, 0x39, 0xa5, 0x6b, 0xa2, 0x48, 0xe8, 0x4d, 0x71, 0x69, 0xca, 0x84, 0xab, 0xe1, 0xef, 0x13, 0x97, 0x38, 0xa9, 0xf9, 0xb1, 0x5b, 0x12, 0xd6, 0x9b, 0xff, 0x4c, 0xf1, 0x15, 0x90, 0xbc, 0x30, 0x13, 0x7, 0x4f, 0x7a, 0x79, 0xfb, 0x80, 0xbc, 0xe3, 0xbe, 0xd0, 0x6c, 0xd3, 0x5b, 0x25, 0x49, 0x2b, 0xb0, 0x29, 0x62, 0x2e, 0x3b, 0x2, 0x3, 0x1, 0x0, 0x1, 0xa3, 0x53, 0x30, 0x51, 0x30, 0xf, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x5, 0x30, 0x3, 0x1, 0x1, 0xff, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x1d, 0xe, 0x4, 0x16, 0x4, 0x14, 0x4c, 0xab, 0x93, 0x18, 0xdf, 0x33, 0x52, 0x3f, 0x1b, 0xda, 0xd, 0xd5, 0xb3, 0xd7, 0xfd, 0xb, 0xb4, 0x8f, 0x63, 0x74, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x18, 0x30, 0x16, 0x80, 0x14, 0x56, 0x8a, 0x69, 0x4f, 0x57, 0x95, 0x1, 0x60, 0x51, 0x33, 0xab, 0x2c, 0x84, 0xc7, 0xbc, 0x65, 0x24, 0xe6, 0x62, 0x30, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0x47, 0x5d, 0xaa, 0x5a, 0x34, 0xc7, 0x4c, 0x14, 0xf8, 0xd3, 0x7f, 0x80, 0xf9, 0xf9, 0xb6, 0x70, 0xb4, 0xac, 0x32, 0x5e, 0xd7, 0xc, 0xbb, 0xf8, 0x84, 0xb9, 0xf7, 0x75, 0xc9, 0xab, 0x93, 0x15, 0x2c, 0x46, 0xd1, 0x23, 0x2c, 0x56, 0x99, 0xf6, 0x2a, 0x1b, 0x28, 0x89, 0xfe, 0xc5, 0x42, 0x16, 0x3f, 0x5b, 0x47, 0xf1, 0x15, 0xfb, 0x17, 0xbd, 0xb1, 0xa1, 0xa5, 0xc3, 0x96, 0xad, 0xfc, 0xaa, 0x6b, 0xc5, 0xf9, 0xb3, 0x30, 0x9, 0x9d, 0x3d, 0xad, 0x40, 0xc8, 0x52, 0x20, 0xc6, 0x18, 0xf6, 0x40, 0x49, 0xba, 0xa9, 0x3d, 0xa7, 0xee, 0x5d, 0xf0, 0x65, 0x89, 0x47, 0x6a, 0x6f, 0x10, 0x77, 0xc5, 0xb8, 0x7c, 0x7e, 0x1f, 0x33, 0x40, 0x8c, 0x16, 0x85, 0x8e, 0xdc, 0x37, 0xd0, 0x61, 0xc1, 0x5f, 0xff, 0x27, 0x62, 0x58, 0x1a, 0xe3, 0x4f, 0xd2, 0xfd, 0x5d, 0x92, 0x7, 0xb6, 0xbc, 0x6d, 0x61, 0x39, 0x37, 0x7b, 0xa2, 0x9e, 0x6f, 0x1c, 0xb3, 0x55, 0xee, 0x3c, 0x59, 0xf2, 0xb6, 0x26, 0xd8, 0x45, 0x5d, 0xbc, 0x4c, 0xb8, 0x7c, 0xa0, 0x8b, 0x63, 0x7f, 0x67, 0x2f, 0x8f, 0xbd, 0x4b, 0x1b, 0x72, 0x58, 0x9b, 0x80, 0xa0, 0x5b, 0x4, 0xbd, 0xc7, 0xc6, 0x71, 0x15, 0xf5, 0x3e, 0xbc, 0xf9, 0x84, 0xc3, 0x5b, 0x2, 0x1f, 0x73, 0xcd, 0x6a, 0x90, 0x2d, 0xaa, 0x32, 0xd9, 0xe7, 0x3c, 0x88, 0xbc, 0x43, 0xa5, 0x2f, 0xcc, 0xe4, 0x1f, 0xc4, 0x18, 0x78, 0xe2, 0x6c, 0x23, 0x99, 0xd7, 0x6, 0x98, 0x7e, 0xa5, 0x66, 0x75, 0x45, 0xf3, 0x73, 0xa5, 0x6, 0xda, 0x54, 0xda, 0x9, 0x76, 0x29, 0x87, 0x5c, 0x8a, 0xe9, 0x8f, 0x8, 0x16, 0xa4, 0x6e, 0xe8, 0xbf, 0x24, 0xc5, 0x19, 0x14, 0xf8, 0x77, 0x5b, 0x45, 0xef, 0x1e, 0x34, 0x44, 0x6f, 0x4d, 0x11, 0x99, 0xff, 0x39, 0xd3, 0x1c, 0x31, 0x82, 0x1, 0xa1, 0x30, 0x82, 0x1, 0x9d, 0x2, 0x1, 0x1, 0x30, 0x2f, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2, 0x8, 0x62, 0x9c, 0x6b, 0xc0, 0x68, 0x88, 0x95, 0x68, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1, 0xa0, 0x81, 0xe4, 0x30, 0x18, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x3, 0x31, 0xb, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0x30, 0x1c, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x5, 0x31, 0xf, 0x17, 0xd, 0x32, 0x31, 0x30, 0x39, 0x31, 0x36, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x2f, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x4, 0x31, 0x22, 0x4, 0x20, 0x2d, 0x2d, 0xa1, 0x96, 0x5, 0xa3, 0x4e, 0x3, 0x7d, 0xbe, 0x82, 0x17, 0x3f, 0x98, 0xa9, 0x92, 0xa5, 0x30, 0xa5, 0xfd, 0xd5, 0x3d, 0xad, 0x88, 0x2f, 0x57, 0xd, 0x4b, 0xa2, 0x4, 0xef, 0x30, 0x30, 0x79, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0xf, 0x31, 0x6c, 0x30, 0x6a, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2a, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x16, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x7, 0x30, 0xe, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x2, 0x0, 0x80, 0x30, 0xd, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x1, 0x40, 0x30, 0x7, 0x6, 0x5, 0x2b, 0xe, 0x3, 0x2, 0x7, 0x30, 0xd, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x1, 0x28, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x4, 0x3, 0x2, 0x4, 0x67, 0x30, 0x65, 0x2, 0x30, 0x2f, 0xf6, 0xb0, 0xb7, 0x2e, 0x84, 0xa7, 0x33, 0xbf, 0xad, 0x17, 0xd6, 0xa0, 0xe6, 0x16, 0x81, 0x18, 0x77, 0xaa, 0x79, 0xd8, 0x8a, 0xbd, 0x27, 0xc9, 0xe6, 0x1d, 0xeb, 0x96, 0xdb, 0xd4, 0x3d, 0xd7, 0x55, 0xb3, 0xef, 0xd7, 0x9f, 0x29, 0x16, 0x2c, 0x8d, 0xbf, 0x25, 0xba, 0xfe, 0x2f, 0x1b, 0x2, 0x31, 0x0, 0xbc, 0x93, 0x3d, 0x95, 0x18, 0x10, 0xdf, 0x66, 0xb2, 0xc4, 0x3e, 0x8, 0xfa, 0xd8, 0x9d, 0x47, 0xa3, 0xa8, 0x4a, 0x24, 0xb8, 0xd5, 0xdd, 0x32, 0x84, 0x6f, 0x8d, 0x2b, 0xbd, 0xb1, 0x2, 0xfd, 0xa6, 0x21, 0xb1, 0x4, 0xee, 0x55, 0xc6, 0x46, 0xc0, 0xfd, 0x21, 0xaa, 0xcf, 0xe6, 0x2a, 0xa4}

	ed := new(protocol.SignedData)
	_, err := asn.Unmarshal(der, ed)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(ed)
}

func TestStandardASN1Lib_sd(t *testing.T) {
	der := []byte{0x30, 0x82, 0x7, 0x34, 0x2, 0x1, 0x1, 0x31, 0xd, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1, 0x30, 0x19, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0xa0, 0xc, 0x4, 0xa, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x65, 0x6c, 0x74, 0xa0, 0x82, 0x5, 0x5e, 0x30, 0x82, 0x2, 0x43, 0x30, 0x82, 0x1, 0x2b, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x8, 0x62, 0x9c, 0x6b, 0xc0, 0x68, 0x88, 0x95, 0x68, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x39, 0x31, 0x34, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x6c, 0x65, 0x61, 0x66, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x76, 0x30, 0x10, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x5, 0x2b, 0x81, 0x4, 0x0, 0x22, 0x3, 0x62, 0x0, 0x4, 0x77, 0x4a, 0xd2, 0x20, 0xfe, 0x5e, 0xa6, 0x3, 0xe5, 0x18, 0x35, 0x85, 0xfe, 0xd7, 0x34, 0x28, 0x64, 0x5e, 0xd2, 0x9d, 0xd0, 0x97, 0x3c, 0x8e, 0xd2, 0x7f, 0x36, 0xf1, 0x99, 0x1e, 0x20, 0x0, 0x6a, 0x8e, 0xe9, 0x7f, 0xbb, 0xa4, 0xca, 0x70, 0x9f, 0xcb, 0x16, 0x4c, 0x57, 0x1c, 0xf7, 0xd4, 0x95, 0x99, 0xf8, 0x78, 0x2e, 0xf4, 0x2c, 0x88, 0x79, 0x20, 0x0, 0xe2, 0x2b, 0x15, 0x5, 0x15, 0x3a, 0x6d, 0xd1, 0xee, 0xf4, 0x4d, 0x4a, 0x6, 0xc3, 0xbc, 0xb7, 0x59, 0xf1, 0x77, 0x37, 0x1c, 0xba, 0xde, 0x22, 0xda, 0xe9, 0xea, 0xe7, 0x78, 0xf1, 0x9c, 0x6, 0xa, 0x95, 0x2e, 0x98, 0x52, 0xa3, 0x31, 0x30, 0x2f, 0x30, 0xc, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x2, 0x30, 0x0, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x18, 0x30, 0x16, 0x80, 0x14, 0x4c, 0xab, 0x93, 0x18, 0xdf, 0x33, 0x52, 0x3f, 0x1b, 0xda, 0xd, 0xd5, 0xb3, 0xd7, 0xfd, 0xb, 0xb4, 0x8f, 0x63, 0x74, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0xc5, 0xfe, 0xec, 0x93, 0xaf, 0x59, 0xab, 0x23, 0xcb, 0xa, 0x4b, 0x66, 0x3c, 0x78, 0x28, 0xd5, 0x65, 0x9d, 0x6a, 0xb6, 0x21, 0x68, 0xbb, 0x59, 0xb3, 0xb0, 0x5b, 0xcc, 0x43, 0x44, 0x96, 0x37, 0x57, 0xdf, 0x43, 0x88, 0x69, 0x44, 0x3a, 0x9a, 0x9, 0x2, 0xb2, 0xa1, 0x3a, 0xb8, 0xa5, 0xbd, 0x2c, 0x69, 0x21, 0xba, 0x37, 0x25, 0x53, 0x57, 0x40, 0x43, 0x76, 0x96, 0xe6, 0x9b, 0x38, 0xf9, 0x16, 0xae, 0x3, 0x63, 0xa6, 0x84, 0x20, 0x88, 0xb8, 0x82, 0x62, 0x36, 0x6a, 0xa9, 0xfd, 0x76, 0xe7, 0x94, 0xb4, 0x90, 0x8d, 0x12, 0xa9, 0xe4, 0x9f, 0xc, 0x90, 0xeb, 0x39, 0xb1, 0x4e, 0x1c, 0x32, 0xb5, 0x21, 0x11, 0xb3, 0xd5, 0xd, 0xc6, 0x93, 0x7d, 0xc8, 0x2c, 0x2c, 0xf4, 0xff, 0x2f, 0x70, 0x6f, 0x88, 0xf0, 0x90, 0xe1, 0x1a, 0x3b, 0x9f, 0xaf, 0xbd, 0x6e, 0x6c, 0x35, 0xbd, 0x7f, 0x5a, 0xee, 0x3d, 0x6a, 0xc6, 0x37, 0xb4, 0x15, 0x4a, 0x8b, 0x25, 0x78, 0x9e, 0x2, 0x8f, 0x18, 0x94, 0x8f, 0xc6, 0xe0, 0xe6, 0x3f, 0x59, 0xcd, 0xe1, 0x4d, 0x74, 0x30, 0xea, 0x47, 0xe6, 0x81, 0x23, 0x0, 0x57, 0xae, 0xaa, 0x7b, 0x48, 0xa3, 0xe6, 0xbb, 0x33, 0x3c, 0xae, 0xa9, 0x2c, 0x85, 0x18, 0x34, 0x81, 0xa1, 0xca, 0xe0, 0xb6, 0x14, 0x69, 0xde, 0x5f, 0xd0, 0xfb, 0xda, 0x66, 0x6c, 0x39, 0xfb, 0x4b, 0x3d, 0x92, 0xb9, 0xd8, 0x22, 0x1f, 0xcc, 0x93, 0x56, 0x8d, 0x99, 0xc8, 0x49, 0x74, 0x89, 0x3c, 0x29, 0x8b, 0xfc, 0xe8, 0x1a, 0x24, 0xb4, 0xef, 0x25, 0x92, 0x2b, 0x38, 0x34, 0xdf, 0x80, 0x90, 0xe, 0xb5, 0xbe, 0xef, 0xb, 0x25, 0x52, 0x28, 0x59, 0xd5, 0xbe, 0xb9, 0xbf, 0xfe, 0x1f, 0xe1, 0x68, 0xd, 0x5c, 0xc6, 0xe, 0xd8, 0x49, 0x51, 0x99, 0x64, 0xef, 0x4f, 0x42, 0x30, 0x82, 0x3, 0x13, 0x30, 0x82, 0x1, 0xfb, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x8, 0x18, 0xf3, 0xc2, 0xd3, 0x27, 0xb5, 0xe6, 0x7, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x39, 0x31, 0x34, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xd0, 0x3a, 0x3f, 0xe0, 0x10, 0xc0, 0xa2, 0x1e, 0xee, 0xd8, 0x32, 0xf4, 0x1d, 0x32, 0xa8, 0x55, 0x24, 0xd, 0xf9, 0x5c, 0xe3, 0x19, 0x5d, 0x9e, 0xd1, 0xa6, 0xa2, 0x32, 0x73, 0x34, 0x59, 0x46, 0x3d, 0x5d, 0x59, 0x48, 0xaa, 0xa9, 0x86, 0xec, 0x84, 0x26, 0xbc, 0xdf, 0x86, 0x40, 0xa7, 0x13, 0xab, 0xbb, 0x28, 0x79, 0x2a, 0x5a, 0xf7, 0xfd, 0xd1, 0xa5, 0x81, 0x2f, 0x9b, 0xff, 0xb4, 0x1e, 0xf1, 0x88, 0xdb, 0xc, 0xf4, 0x96, 0x85, 0x31, 0xd9, 0x3e, 0x99, 0x21, 0x3b, 0xf6, 0x13, 0xa6, 0x95, 0x2f, 0x5d, 0xf2, 0x79, 0x43, 0xd1, 0x7, 0xa1, 0x99, 0xb1, 0xdb, 0x63, 0x7f, 0x88, 0x3e, 0xef, 0xd2, 0x5a, 0xb5, 0x78, 0x98, 0xf3, 0xb3, 0x11, 0xc5, 0xe3, 0x2, 0xf9, 0xdd, 0xf8, 0xac, 0xbc, 0x47, 0xa0, 0xb7, 0x10, 0x5f, 0x72, 0x57, 0x83, 0x40, 0x9, 0x39, 0xaf, 0xde, 0x6e, 0x67, 0xe8, 0x54, 0xcb, 0x5b, 0x3d, 0x0, 0x30, 0xed, 0xc0, 0x8b, 0x66, 0x66, 0x7e, 0x76, 0x76, 0x1b, 0x55, 0x95, 0x92, 0x8e, 0xb0, 0x5c, 0x30, 0xa4, 0xcb, 0xb6, 0x5b, 0xb5, 0x8b, 0xd7, 0x8e, 0xce, 0xee, 0x31, 0x2c, 0xa9, 0x2, 0x6e, 0x61, 0x93, 0xf8, 0x2a, 0x8a, 0x54, 0x32, 0x79, 0x21, 0x78, 0x91, 0xaf, 0x95, 0x3b, 0xf5, 0x29, 0x19, 0x62, 0xd, 0x52, 0x81, 0xfd, 0x4c, 0x9e, 0x54, 0xad, 0xb2, 0x55, 0xd7, 0xe, 0x5d, 0x81, 0xbf, 0xf9, 0x65, 0xb1, 0x13, 0x39, 0xa5, 0x6b, 0xa2, 0x48, 0xe8, 0x4d, 0x71, 0x69, 0xca, 0x84, 0xab, 0xe1, 0xef, 0x13, 0x97, 0x38, 0xa9, 0xf9, 0xb1, 0x5b, 0x12, 0xd6, 0x9b, 0xff, 0x4c, 0xf1, 0x15, 0x90, 0xbc, 0x30, 0x13, 0x7, 0x4f, 0x7a, 0x79, 0xfb, 0x80, 0xbc, 0xe3, 0xbe, 0xd0, 0x6c, 0xd3, 0x5b, 0x25, 0x49, 0x2b, 0xb0, 0x29, 0x62, 0x2e, 0x3b, 0x2, 0x3, 0x1, 0x0, 0x1, 0xa3, 0x53, 0x30, 0x51, 0x30, 0xf, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x5, 0x30, 0x3, 0x1, 0x1, 0xff, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x1d, 0xe, 0x4, 0x16, 0x4, 0x14, 0x4c, 0xab, 0x93, 0x18, 0xdf, 0x33, 0x52, 0x3f, 0x1b, 0xda, 0xd, 0xd5, 0xb3, 0xd7, 0xfd, 0xb, 0xb4, 0x8f, 0x63, 0x74, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x18, 0x30, 0x16, 0x80, 0x14, 0x56, 0x8a, 0x69, 0x4f, 0x57, 0x95, 0x1, 0x60, 0x51, 0x33, 0xab, 0x2c, 0x84, 0xc7, 0xbc, 0x65, 0x24, 0xe6, 0x62, 0x30, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0x47, 0x5d, 0xaa, 0x5a, 0x34, 0xc7, 0x4c, 0x14, 0xf8, 0xd3, 0x7f, 0x80, 0xf9, 0xf9, 0xb6, 0x70, 0xb4, 0xac, 0x32, 0x5e, 0xd7, 0xc, 0xbb, 0xf8, 0x84, 0xb9, 0xf7, 0x75, 0xc9, 0xab, 0x93, 0x15, 0x2c, 0x46, 0xd1, 0x23, 0x2c, 0x56, 0x99, 0xf6, 0x2a, 0x1b, 0x28, 0x89, 0xfe, 0xc5, 0x42, 0x16, 0x3f, 0x5b, 0x47, 0xf1, 0x15, 0xfb, 0x17, 0xbd, 0xb1, 0xa1, 0xa5, 0xc3, 0x96, 0xad, 0xfc, 0xaa, 0x6b, 0xc5, 0xf9, 0xb3, 0x30, 0x9, 0x9d, 0x3d, 0xad, 0x40, 0xc8, 0x52, 0x20, 0xc6, 0x18, 0xf6, 0x40, 0x49, 0xba, 0xa9, 0x3d, 0xa7, 0xee, 0x5d, 0xf0, 0x65, 0x89, 0x47, 0x6a, 0x6f, 0x10, 0x77, 0xc5, 0xb8, 0x7c, 0x7e, 0x1f, 0x33, 0x40, 0x8c, 0x16, 0x85, 0x8e, 0xdc, 0x37, 0xd0, 0x61, 0xc1, 0x5f, 0xff, 0x27, 0x62, 0x58, 0x1a, 0xe3, 0x4f, 0xd2, 0xfd, 0x5d, 0x92, 0x7, 0xb6, 0xbc, 0x6d, 0x61, 0x39, 0x37, 0x7b, 0xa2, 0x9e, 0x6f, 0x1c, 0xb3, 0x55, 0xee, 0x3c, 0x59, 0xf2, 0xb6, 0x26, 0xd8, 0x45, 0x5d, 0xbc, 0x4c, 0xb8, 0x7c, 0xa0, 0x8b, 0x63, 0x7f, 0x67, 0x2f, 0x8f, 0xbd, 0x4b, 0x1b, 0x72, 0x58, 0x9b, 0x80, 0xa0, 0x5b, 0x4, 0xbd, 0xc7, 0xc6, 0x71, 0x15, 0xf5, 0x3e, 0xbc, 0xf9, 0x84, 0xc3, 0x5b, 0x2, 0x1f, 0x73, 0xcd, 0x6a, 0x90, 0x2d, 0xaa, 0x32, 0xd9, 0xe7, 0x3c, 0x88, 0xbc, 0x43, 0xa5, 0x2f, 0xcc, 0xe4, 0x1f, 0xc4, 0x18, 0x78, 0xe2, 0x6c, 0x23, 0x99, 0xd7, 0x6, 0x98, 0x7e, 0xa5, 0x66, 0x75, 0x45, 0xf3, 0x73, 0xa5, 0x6, 0xda, 0x54, 0xda, 0x9, 0x76, 0x29, 0x87, 0x5c, 0x8a, 0xe9, 0x8f, 0x8, 0x16, 0xa4, 0x6e, 0xe8, 0xbf, 0x24, 0xc5, 0x19, 0x14, 0xf8, 0x77, 0x5b, 0x45, 0xef, 0x1e, 0x34, 0x44, 0x6f, 0x4d, 0x11, 0x99, 0xff, 0x39, 0xd3, 0x1c, 0x31, 0x82, 0x1, 0xa1, 0x30, 0x82, 0x1, 0x9d, 0x2, 0x1, 0x1, 0x30, 0x2f, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2, 0x8, 0x62, 0x9c, 0x6b, 0xc0, 0x68, 0x88, 0x95, 0x68, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1, 0xa0, 0x81, 0xe4, 0x30, 0x18, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x3, 0x31, 0xb, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0x30, 0x1c, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x5, 0x31, 0xf, 0x17, 0xd, 0x32, 0x31, 0x30, 0x39, 0x31, 0x36, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x2f, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x4, 0x31, 0x22, 0x4, 0x20, 0x2d, 0x2d, 0xa1, 0x96, 0x5, 0xa3, 0x4e, 0x3, 0x7d, 0xbe, 0x82, 0x17, 0x3f, 0x98, 0xa9, 0x92, 0xa5, 0x30, 0xa5, 0xfd, 0xd5, 0x3d, 0xad, 0x88, 0x2f, 0x57, 0xd, 0x4b, 0xa2, 0x4, 0xef, 0x30, 0x30, 0x79, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0xf, 0x31, 0x6c, 0x30, 0x6a, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2a, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x16, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x7, 0x30, 0xe, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x2, 0x0, 0x80, 0x30, 0xd, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x1, 0x40, 0x30, 0x7, 0x6, 0x5, 0x2b, 0xe, 0x3, 0x2, 0x7, 0x30, 0xd, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x1, 0x28, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x4, 0x3, 0x2, 0x4, 0x67, 0x30, 0x65, 0x2, 0x30, 0x2f, 0xf6, 0xb0, 0xb7, 0x2e, 0x84, 0xa7, 0x33, 0xbf, 0xad, 0x17, 0xd6, 0xa0, 0xe6, 0x16, 0x81, 0x18, 0x77, 0xaa, 0x79, 0xd8, 0x8a, 0xbd, 0x27, 0xc9, 0xe6, 0x1d, 0xeb, 0x96, 0xdb, 0xd4, 0x3d, 0xd7, 0x55, 0xb3, 0xef, 0xd7, 0x9f, 0x29, 0x16, 0x2c, 0x8d, 0xbf, 0x25, 0xba, 0xfe, 0x2f, 0x1b, 0x2, 0x31, 0x0, 0xbc, 0x93, 0x3d, 0x95, 0x18, 0x10, 0xdf, 0x66, 0xb2, 0xc4, 0x3e, 0x8, 0xfa, 0xd8, 0x9d, 0x47, 0xa3, 0xa8, 0x4a, 0x24, 0xb8, 0xd5, 0xdd, 0x32, 0x84, 0x6f, 0x8d, 0x2b, 0xbd, 0xb1, 0x2, 0xfd, 0xa6, 0x21, 0xb1, 0x4, 0xee, 0x55, 0xc6, 0x46, 0xc0, 0xfd, 0x21, 0xaa, 0xcf, 0xe6, 0x2a, 0xa4}

	ed := new(protocol.SignedData)
	_, err := asn1.Unmarshal(der, ed)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(ed)
}

func TestCustomizedASN1Lib_ed(t *testing.T) {
	edDer := []byte{0x30, 0x82, 0x1, 0x26, 0x2, 0x1, 0x2, 0x31, 0x81, 0xe2, 0xa1, 0x81, 0xdf, 0x2, 0x1, 0x3, 0xa0, 0x71, 0xa1, 0x6f, 0x30, 0x9, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x3, 0x62, 0x0, 0x4, 0xa8, 0x66, 0xbb, 0xc5, 0x83, 0xd4, 0xcf, 0x98, 0x26, 0x79, 0x24, 0xf0, 0x0, 0x1f, 0x89, 0x5, 0x5, 0x28, 0x6, 0x86, 0x3a, 0x0, 0xb2, 0xad, 0x6e, 0xe1, 0x46, 0x2f, 0x92, 0xfe, 0x76, 0x1f, 0xda, 0x10, 0x4b, 0x67, 0x40, 0xf1, 0x89, 0xaf, 0x85, 0xb3, 0x5b, 0xad, 0x53, 0x4f, 0x4d, 0x39, 0xb9, 0xd4, 0xcf, 0xcf, 0xcb, 0xd9, 0x80, 0xec, 0xe8, 0xc2, 0xab, 0xe9, 0x7d, 0x32, 0x52, 0x62, 0xad, 0xe3, 0x1e, 0x56, 0xa2, 0xc1, 0x57, 0x61, 0xa1, 0x83, 0x0, 0xed, 0xc4, 0x22, 0x27, 0x30, 0x4c, 0xa1, 0xb1, 0x5, 0xc9, 0x4, 0xfa, 0xc8, 0x72, 0x9, 0xf9, 0x34, 0xdd, 0x2b, 0x3a, 0xdc, 0x30, 0x18, 0x6, 0x9, 0x2b, 0x81, 0x5, 0x10, 0x86, 0x48, 0x3f, 0x0, 0x2, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x5, 0x30, 0x4d, 0x30, 0x4b, 0x30, 0x2f, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2, 0x8, 0x2c, 0x4f, 0x26, 0x2b, 0x8a, 0xe6, 0xdd, 0x26, 0x4, 0x18, 0x5c, 0xba, 0xb3, 0x24, 0x84, 0x98, 0x98, 0xbb, 0x6a, 0xa3, 0x72, 0xdf, 0xfa, 0x53, 0x7c, 0xa8, 0x36, 0xaf, 0xdb, 0x94, 0x68, 0x45, 0x6f, 0xe9, 0x30, 0x3c, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0x30, 0x1d, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2, 0x4, 0x10, 0xfd, 0x19, 0xbc, 0x1b, 0x10, 0x68, 0x98, 0xfe, 0xb6, 0xf6, 0xe3, 0xe7, 0xa6, 0xd0, 0x93, 0x77, 0x80, 0x10, 0xc9, 0x26, 0x30, 0xda, 0xfb, 0x7e, 0xb4, 0x27, 0x68, 0xae, 0x99, 0xa4, 0xa8, 0xd0, 0xe8, 0xb7}

	ed := new(protocol.EnvelopedData)
	_, err := asn.Unmarshal(edDer, ed)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(ed)
}

func TestStandardASN1Lib_ed(t *testing.T) {
	edDer := []byte{0x30, 0x82, 0x1, 0x26, 0x2, 0x1, 0x2, 0x31, 0x81, 0xe2, 0xa1, 0x81, 0xdf, 0x2, 0x1, 0x3, 0xa0, 0x71, 0xa1, 0x6f, 0x30, 0x9, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x3, 0x62, 0x0, 0x4, 0xa8, 0x66, 0xbb, 0xc5, 0x83, 0xd4, 0xcf, 0x98, 0x26, 0x79, 0x24, 0xf0, 0x0, 0x1f, 0x89, 0x5, 0x5, 0x28, 0x6, 0x86, 0x3a, 0x0, 0xb2, 0xad, 0x6e, 0xe1, 0x46, 0x2f, 0x92, 0xfe, 0x76, 0x1f, 0xda, 0x10, 0x4b, 0x67, 0x40, 0xf1, 0x89, 0xaf, 0x85, 0xb3, 0x5b, 0xad, 0x53, 0x4f, 0x4d, 0x39, 0xb9, 0xd4, 0xcf, 0xcf, 0xcb, 0xd9, 0x80, 0xec, 0xe8, 0xc2, 0xab, 0xe9, 0x7d, 0x32, 0x52, 0x62, 0xad, 0xe3, 0x1e, 0x56, 0xa2, 0xc1, 0x57, 0x61, 0xa1, 0x83, 0x0, 0xed, 0xc4, 0x22, 0x27, 0x30, 0x4c, 0xa1, 0xb1, 0x5, 0xc9, 0x4, 0xfa, 0xc8, 0x72, 0x9, 0xf9, 0x34, 0xdd, 0x2b, 0x3a, 0xdc, 0x30, 0x18, 0x6, 0x9, 0x2b, 0x81, 0x5, 0x10, 0x86, 0x48, 0x3f, 0x0, 0x2, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x5, 0x30, 0x4d, 0x30, 0x4b, 0x30, 0x2f, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2, 0x8, 0x2c, 0x4f, 0x26, 0x2b, 0x8a, 0xe6, 0xdd, 0x26, 0x4, 0x18, 0x5c, 0xba, 0xb3, 0x24, 0x84, 0x98, 0x98, 0xbb, 0x6a, 0xa3, 0x72, 0xdf, 0xfa, 0x53, 0x7c, 0xa8, 0x36, 0xaf, 0xdb, 0x94, 0x68, 0x45, 0x6f, 0xe9, 0x30, 0x3c, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0x30, 0x1d, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2, 0x4, 0x10, 0xfd, 0x19, 0xbc, 0x1b, 0x10, 0x68, 0x98, 0xfe, 0xb6, 0xf6, 0xe3, 0xe7, 0xa6, 0xd0, 0x93, 0x77, 0x80, 0x10, 0xc9, 0x26, 0x30, 0xda, 0xfb, 0x7e, 0xb4, 0x27, 0x68, 0xae, 0x99, 0xa4, 0xa8, 0xd0, 0xe8, 0xb7}
	fmt.Printf("%s\n", base64.StdEncoding.EncodeToString(edDer))
	ed := new(protocol.EnvelopedData)
	_, err := asn1.Unmarshal(edDer, ed)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(ed)
	for i, ri := range ed.RecipientInfos() {
		t.Logf("%d th recipient info: %#v", i, ri)
	}
}

func TestEncryptOpenSSL2(t *testing.T) {
	privKeyBytes := []byte{0x30, 0x81, 0xa4, 0x2, 0x1, 0x1, 0x4, 0x30, 0xea, 0x9b, 0x56, 0x35, 0xba, 0x5e, 0x5e, 0x68, 0xaa, 0x6c, 0x30, 0x56, 0x49, 0x75, 0xff, 0x93, 0x79, 0x19, 0x64, 0x87, 0x3a, 0x91, 0xa5, 0xca, 0x10, 0x40, 0xf4, 0x8a, 0xbc, 0xc1, 0xe8, 0xb8, 0x28, 0xa4, 0x1d, 0x6c, 0x8a, 0xc5, 0x11, 0x93, 0x2d, 0xf6, 0xa0, 0xdb, 0x1, 0x39, 0x14, 0x4b, 0xa0, 0x7, 0x6, 0x5, 0x2b, 0x81, 0x4, 0x0, 0x22, 0xa1, 0x64, 0x3, 0x62, 0x0, 0x4, 0xf4, 0xca, 0xa5, 0x71, 0xa9, 0x2d, 0x33, 0x6, 0x63, 0xf, 0xbf, 0xf9, 0xdf, 0xba, 0xc4, 0x99, 0xe4, 0x33, 0x4a, 0x5e, 0xd1, 0x1c, 0xf3, 0xa2, 0xb4, 0xa6, 0x93, 0x86, 0x3e, 0x5e, 0xed, 0xa5, 0x5b, 0x6c, 0x2c, 0xa9, 0xb0, 0x23, 0x54, 0x6e, 0x34, 0xaa, 0xd7, 0x6d, 0x95, 0xb0, 0xbf, 0x43, 0x45, 0xd6, 0x7e, 0x1c, 0xda, 0x19, 0x88, 0x12, 0x4f, 0x93, 0x2a, 0xb4, 0x6f, 0x60, 0x2f, 0x56, 0x5c, 0x56, 0xb2, 0x58, 0x28, 0xa6, 0x54, 0x3, 0xee, 0x1b, 0x2d, 0xdd, 0xe3, 0x89, 0x73, 0x39, 0xac, 0xfc, 0x55, 0x6, 0x0, 0xea, 0x24, 0x9, 0xb5, 0x61, 0x18, 0xd8, 0x9a, 0xfa, 0xaa, 0xe7}
	certBytes := []byte{0x30, 0x82, 0x2, 0x43, 0x30, 0x82, 0x1, 0x2b, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x8, 0x2c, 0x4f, 0x26, 0x2b, 0x8a, 0xe6, 0xdd, 0x26, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x39, 0x31, 0x33, 0x31, 0x32, 0x34, 0x38, 0x34, 0x34, 0x5a, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x6c, 0x65, 0x61, 0x66, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x76, 0x30, 0x10, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x5, 0x2b, 0x81, 0x4, 0x0, 0x22, 0x3, 0x62, 0x0, 0x4, 0xf4, 0xca, 0xa5, 0x71, 0xa9, 0x2d, 0x33, 0x6, 0x63, 0xf, 0xbf, 0xf9, 0xdf, 0xba, 0xc4, 0x99, 0xe4, 0x33, 0x4a, 0x5e, 0xd1, 0x1c, 0xf3, 0xa2, 0xb4, 0xa6, 0x93, 0x86, 0x3e, 0x5e, 0xed, 0xa5, 0x5b, 0x6c, 0x2c, 0xa9, 0xb0, 0x23, 0x54, 0x6e, 0x34, 0xaa, 0xd7, 0x6d, 0x95, 0xb0, 0xbf, 0x43, 0x45, 0xd6, 0x7e, 0x1c, 0xda, 0x19, 0x88, 0x12, 0x4f, 0x93, 0x2a, 0xb4, 0x6f, 0x60, 0x2f, 0x56, 0x5c, 0x56, 0xb2, 0x58, 0x28, 0xa6, 0x54, 0x3, 0xee, 0x1b, 0x2d, 0xdd, 0xe3, 0x89, 0x73, 0x39, 0xac, 0xfc, 0x55, 0x6, 0x0, 0xea, 0x24, 0x9, 0xb5, 0x61, 0x18, 0xd8, 0x9a, 0xfa, 0xaa, 0xe7, 0xa3, 0x31, 0x30, 0x2f, 0x30, 0xc, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x2, 0x30, 0x0, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x18, 0x30, 0x16, 0x80, 0x14, 0x6d, 0xb, 0x44, 0xdf, 0x9b, 0xdb, 0xe2, 0xe9, 0xf7, 0xa6, 0xc, 0x4d, 0x95, 0x69, 0x17, 0x6b, 0xba, 0x72, 0xc1, 0x30, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0x7c, 0xd7, 0x2c, 0xcb, 0x36, 0xfe, 0xf7, 0xbb, 0x3d, 0xe4, 0xbe, 0x19, 0x93, 0x59, 0x9c, 0x99, 0xf9, 0xd, 0x33, 0x2a, 0x84, 0x6a, 0x95, 0xc4, 0x10, 0x58, 0xec, 0x1f, 0x9c, 0xf, 0xea, 0x9f, 0x79, 0x9d, 0x29, 0xf6, 0x5f, 0x9, 0x73, 0x68, 0x9d, 0xfc, 0x9f, 0x92, 0x9f, 0x12, 0xad, 0x8c, 0xd3, 0x5e, 0xe2, 0xdd, 0x82, 0xe8, 0xb1, 0x45, 0x58, 0x14, 0x15, 0x5e, 0x4, 0x13, 0x71, 0x74, 0xce, 0xb6, 0x6e, 0xf4, 0x4, 0xdf, 0x75, 0xe2, 0x2, 0x85, 0xed, 0x2e, 0x47, 0x28, 0x59, 0x18, 0x41, 0x73, 0xc0, 0x3c, 0x56, 0xf9, 0xce, 0xc5, 0x32, 0xc, 0x71, 0x46, 0x5f, 0x62, 0x61, 0xad, 0xc9, 0xf9, 0xe9, 0xa0, 0x6c, 0x3e, 0x5c, 0xc2, 0x2b, 0x80, 0xb3, 0xc0, 0x16, 0x1b, 0xee, 0xe3, 0xe5, 0x6b, 0x20, 0x62, 0x96, 0x7e, 0xe4, 0x16, 0xde, 0x5, 0x64, 0x2b, 0x1f, 0x6d, 0xe0, 0xe, 0xf5, 0x1f, 0xfa, 0x81, 0xd8, 0x8b, 0x23, 0x3c, 0x6, 0x93, 0x59, 0x45, 0x9f, 0x38, 0xd4, 0x2e, 0xe8, 0x5a, 0x35, 0x5c, 0xea, 0xbc, 0x95, 0xc9, 0x1, 0xe0, 0x48, 0xe4, 0x14, 0xf5, 0x3a, 0xee, 0x68, 0xea, 0xd, 0x1e, 0x15, 0xc2, 0x92, 0xc3, 0x48, 0xb2, 0x7b, 0x5e, 0x2b, 0x5e, 0x48, 0x73, 0xfe, 0x58, 0xfa, 0x79, 0xc4, 0x3e, 0x2e, 0xd9, 0xcc, 0x11, 0xe0, 0x5c, 0xd1, 0x2f, 0x9e, 0x47, 0xf, 0x6b, 0x3a, 0x62, 0x42, 0xdc, 0xca, 0x59, 0x12, 0x82, 0x2a, 0xd0, 0x9f, 0xc5, 0xb8, 0x2c, 0x34, 0xb5, 0x32, 0xa1, 0x39, 0xf7, 0x7d, 0x74, 0x6c, 0x87, 0xd0, 0x11, 0x5e, 0x74, 0x8b, 0x18, 0x81, 0xb0, 0xd1, 0x39, 0x34, 0x50, 0xac, 0x35, 0x51, 0xc3, 0x42, 0xe0, 0x8a, 0x17, 0x2f, 0x93, 0x9e, 0x41, 0x3e, 0xa, 0xae, 0x38, 0xd, 0x67, 0xb5, 0x77, 0x8c, 0x33, 0xa, 0xc6, 0x9d, 0x10}
	der := []byte{0x30, 0x82, 0x1, 0x39, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x3, 0xa0, 0x82, 0x1, 0x2a, 0x30, 0x82, 0x1, 0x26, 0x2, 0x1, 0x2, 0x31, 0x81, 0xe2, 0xa1, 0x81, 0xdf, 0x2, 0x1, 0x3, 0xa0, 0x71, 0xa1, 0x6f, 0x30, 0x9, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x3, 0x62, 0x0, 0x4, 0xa8, 0x66, 0xbb, 0xc5, 0x83, 0xd4, 0xcf, 0x98, 0x26, 0x79, 0x24, 0xf0, 0x0, 0x1f, 0x89, 0x5, 0x5, 0x28, 0x6, 0x86, 0x3a, 0x0, 0xb2, 0xad, 0x6e, 0xe1, 0x46, 0x2f, 0x92, 0xfe, 0x76, 0x1f, 0xda, 0x10, 0x4b, 0x67, 0x40, 0xf1, 0x89, 0xaf, 0x85, 0xb3, 0x5b, 0xad, 0x53, 0x4f, 0x4d, 0x39, 0xb9, 0xd4, 0xcf, 0xcf, 0xcb, 0xd9, 0x80, 0xec, 0xe8, 0xc2, 0xab, 0xe9, 0x7d, 0x32, 0x52, 0x62, 0xad, 0xe3, 0x1e, 0x56, 0xa2, 0xc1, 0x57, 0x61, 0xa1, 0x83, 0x0, 0xed, 0xc4, 0x22, 0x27, 0x30, 0x4c, 0xa1, 0xb1, 0x5, 0xc9, 0x4, 0xfa, 0xc8, 0x72, 0x9, 0xf9, 0x34, 0xdd, 0x2b, 0x3a, 0xdc, 0x30, 0x18, 0x6, 0x9, 0x2b, 0x81, 0x5, 0x10, 0x86, 0x48, 0x3f, 0x0, 0x2, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x5, 0x30, 0x4d, 0x30, 0x4b, 0x30, 0x2f, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2, 0x8, 0x2c, 0x4f, 0x26, 0x2b, 0x8a, 0xe6, 0xdd, 0x26, 0x4, 0x18, 0x5c, 0xba, 0xb3, 0x24, 0x84, 0x98, 0x98, 0xbb, 0x6a, 0xa3, 0x72, 0xdf, 0xfa, 0x53, 0x7c, 0xa8, 0x36, 0xaf, 0xdb, 0x94, 0x68, 0x45, 0x6f, 0xe9, 0x30, 0x3c, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0x30, 0x1d, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2, 0x4, 0x10, 0xfd, 0x19, 0xbc, 0x1b, 0x10, 0x68, 0x98, 0xfe, 0xb6, 0xf6, 0xe3, 0xe7, 0xa6, 0xd0, 0x93, 0x77, 0x80, 0x10, 0xc9, 0x26, 0x30, 0xda, 0xfb, 0x7e, 0xb4, 0x27, 0x68, 0xae, 0x99, 0xa4, 0xa8, 0xd0, 0xe8, 0xb7}

	fmt.Printf("\n%q\n", base64.StdEncoding.EncodeToString(der))

	ecPrivKey, err := x509.ParseECPrivateKey(privKeyBytes)
	tlsCert := tls.Certificate{
		Certificate:                  nil,
		PrivateKey:                   ecPrivKey,
		SupportedSignatureAlgorithms: nil,
		OCSPStaple:                   nil,
		SignedCertificateTimestamps:  nil,
		Leaf:                         nil,
	}
	tlsCert.Certificate = make([][]byte, 1)
	tlsCert.Certificate[0] = certBytes
	cms, err := cms.New(tlsCert)
	plain, err := cms.Decrypt(der)
	if err != nil {
		t.Error(err)
	}

	message := []byte("Hallo Welt!")
	if !bytes.Equal(message, plain) {
		t.Fatal("Encryption and decryption are not inverse")
	}
}

func TestSignOpenSSL2(t *testing.T) {
	//message := []byte("Hallo Welt!")
	detachedSig := []byte{0x30, 0x82, 0x7, 0x47, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x2, 0xa0, 0x82, 0x7, 0x38, 0x30, 0x82, 0x7, 0x34, 0x2, 0x1, 0x1, 0x31, 0xd, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1, 0x30, 0x19, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0xa0, 0xc, 0x4, 0xa, 0x48, 0x61, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x65, 0x6c, 0x74, 0xa0, 0x82, 0x5, 0x5e, 0x30, 0x82, 0x2, 0x43, 0x30, 0x82, 0x1, 0x2b, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x8, 0x62, 0x9c, 0x6b, 0xc0, 0x68, 0x88, 0x95, 0x68, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x39, 0x31, 0x34, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x6c, 0x65, 0x61, 0x66, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x76, 0x30, 0x10, 0x6, 0x7, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x2, 0x1, 0x6, 0x5, 0x2b, 0x81, 0x4, 0x0, 0x22, 0x3, 0x62, 0x0, 0x4, 0x77, 0x4a, 0xd2, 0x20, 0xfe, 0x5e, 0xa6, 0x3, 0xe5, 0x18, 0x35, 0x85, 0xfe, 0xd7, 0x34, 0x28, 0x64, 0x5e, 0xd2, 0x9d, 0xd0, 0x97, 0x3c, 0x8e, 0xd2, 0x7f, 0x36, 0xf1, 0x99, 0x1e, 0x20, 0x0, 0x6a, 0x8e, 0xe9, 0x7f, 0xbb, 0xa4, 0xca, 0x70, 0x9f, 0xcb, 0x16, 0x4c, 0x57, 0x1c, 0xf7, 0xd4, 0x95, 0x99, 0xf8, 0x78, 0x2e, 0xf4, 0x2c, 0x88, 0x79, 0x20, 0x0, 0xe2, 0x2b, 0x15, 0x5, 0x15, 0x3a, 0x6d, 0xd1, 0xee, 0xf4, 0x4d, 0x4a, 0x6, 0xc3, 0xbc, 0xb7, 0x59, 0xf1, 0x77, 0x37, 0x1c, 0xba, 0xde, 0x22, 0xda, 0xe9, 0xea, 0xe7, 0x78, 0xf1, 0x9c, 0x6, 0xa, 0x95, 0x2e, 0x98, 0x52, 0xa3, 0x31, 0x30, 0x2f, 0x30, 0xc, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x2, 0x30, 0x0, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x18, 0x30, 0x16, 0x80, 0x14, 0x4c, 0xab, 0x93, 0x18, 0xdf, 0x33, 0x52, 0x3f, 0x1b, 0xda, 0xd, 0xd5, 0xb3, 0xd7, 0xfd, 0xb, 0xb4, 0x8f, 0x63, 0x74, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0xc5, 0xfe, 0xec, 0x93, 0xaf, 0x59, 0xab, 0x23, 0xcb, 0xa, 0x4b, 0x66, 0x3c, 0x78, 0x28, 0xd5, 0x65, 0x9d, 0x6a, 0xb6, 0x21, 0x68, 0xbb, 0x59, 0xb3, 0xb0, 0x5b, 0xcc, 0x43, 0x44, 0x96, 0x37, 0x57, 0xdf, 0x43, 0x88, 0x69, 0x44, 0x3a, 0x9a, 0x9, 0x2, 0xb2, 0xa1, 0x3a, 0xb8, 0xa5, 0xbd, 0x2c, 0x69, 0x21, 0xba, 0x37, 0x25, 0x53, 0x57, 0x40, 0x43, 0x76, 0x96, 0xe6, 0x9b, 0x38, 0xf9, 0x16, 0xae, 0x3, 0x63, 0xa6, 0x84, 0x20, 0x88, 0xb8, 0x82, 0x62, 0x36, 0x6a, 0xa9, 0xfd, 0x76, 0xe7, 0x94, 0xb4, 0x90, 0x8d, 0x12, 0xa9, 0xe4, 0x9f, 0xc, 0x90, 0xeb, 0x39, 0xb1, 0x4e, 0x1c, 0x32, 0xb5, 0x21, 0x11, 0xb3, 0xd5, 0xd, 0xc6, 0x93, 0x7d, 0xc8, 0x2c, 0x2c, 0xf4, 0xff, 0x2f, 0x70, 0x6f, 0x88, 0xf0, 0x90, 0xe1, 0x1a, 0x3b, 0x9f, 0xaf, 0xbd, 0x6e, 0x6c, 0x35, 0xbd, 0x7f, 0x5a, 0xee, 0x3d, 0x6a, 0xc6, 0x37, 0xb4, 0x15, 0x4a, 0x8b, 0x25, 0x78, 0x9e, 0x2, 0x8f, 0x18, 0x94, 0x8f, 0xc6, 0xe0, 0xe6, 0x3f, 0x59, 0xcd, 0xe1, 0x4d, 0x74, 0x30, 0xea, 0x47, 0xe6, 0x81, 0x23, 0x0, 0x57, 0xae, 0xaa, 0x7b, 0x48, 0xa3, 0xe6, 0xbb, 0x33, 0x3c, 0xae, 0xa9, 0x2c, 0x85, 0x18, 0x34, 0x81, 0xa1, 0xca, 0xe0, 0xb6, 0x14, 0x69, 0xde, 0x5f, 0xd0, 0xfb, 0xda, 0x66, 0x6c, 0x39, 0xfb, 0x4b, 0x3d, 0x92, 0xb9, 0xd8, 0x22, 0x1f, 0xcc, 0x93, 0x56, 0x8d, 0x99, 0xc8, 0x49, 0x74, 0x89, 0x3c, 0x29, 0x8b, 0xfc, 0xe8, 0x1a, 0x24, 0xb4, 0xef, 0x25, 0x92, 0x2b, 0x38, 0x34, 0xdf, 0x80, 0x90, 0xe, 0xb5, 0xbe, 0xef, 0xb, 0x25, 0x52, 0x28, 0x59, 0xd5, 0xbe, 0xb9, 0xbf, 0xfe, 0x1f, 0xe1, 0x68, 0xd, 0x5c, 0xc6, 0xe, 0xd8, 0x49, 0x51, 0x99, 0x64, 0xef, 0x4f, 0x42, 0x30, 0x82, 0x3, 0x13, 0x30, 0x82, 0x1, 0xfb, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x8, 0x18, 0xf3, 0xc2, 0xd3, 0x27, 0xb5, 0xe6, 0x7, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x39, 0x31, 0x34, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xd0, 0x3a, 0x3f, 0xe0, 0x10, 0xc0, 0xa2, 0x1e, 0xee, 0xd8, 0x32, 0xf4, 0x1d, 0x32, 0xa8, 0x55, 0x24, 0xd, 0xf9, 0x5c, 0xe3, 0x19, 0x5d, 0x9e, 0xd1, 0xa6, 0xa2, 0x32, 0x73, 0x34, 0x59, 0x46, 0x3d, 0x5d, 0x59, 0x48, 0xaa, 0xa9, 0x86, 0xec, 0x84, 0x26, 0xbc, 0xdf, 0x86, 0x40, 0xa7, 0x13, 0xab, 0xbb, 0x28, 0x79, 0x2a, 0x5a, 0xf7, 0xfd, 0xd1, 0xa5, 0x81, 0x2f, 0x9b, 0xff, 0xb4, 0x1e, 0xf1, 0x88, 0xdb, 0xc, 0xf4, 0x96, 0x85, 0x31, 0xd9, 0x3e, 0x99, 0x21, 0x3b, 0xf6, 0x13, 0xa6, 0x95, 0x2f, 0x5d, 0xf2, 0x79, 0x43, 0xd1, 0x7, 0xa1, 0x99, 0xb1, 0xdb, 0x63, 0x7f, 0x88, 0x3e, 0xef, 0xd2, 0x5a, 0xb5, 0x78, 0x98, 0xf3, 0xb3, 0x11, 0xc5, 0xe3, 0x2, 0xf9, 0xdd, 0xf8, 0xac, 0xbc, 0x47, 0xa0, 0xb7, 0x10, 0x5f, 0x72, 0x57, 0x83, 0x40, 0x9, 0x39, 0xaf, 0xde, 0x6e, 0x67, 0xe8, 0x54, 0xcb, 0x5b, 0x3d, 0x0, 0x30, 0xed, 0xc0, 0x8b, 0x66, 0x66, 0x7e, 0x76, 0x76, 0x1b, 0x55, 0x95, 0x92, 0x8e, 0xb0, 0x5c, 0x30, 0xa4, 0xcb, 0xb6, 0x5b, 0xb5, 0x8b, 0xd7, 0x8e, 0xce, 0xee, 0x31, 0x2c, 0xa9, 0x2, 0x6e, 0x61, 0x93, 0xf8, 0x2a, 0x8a, 0x54, 0x32, 0x79, 0x21, 0x78, 0x91, 0xaf, 0x95, 0x3b, 0xf5, 0x29, 0x19, 0x62, 0xd, 0x52, 0x81, 0xfd, 0x4c, 0x9e, 0x54, 0xad, 0xb2, 0x55, 0xd7, 0xe, 0x5d, 0x81, 0xbf, 0xf9, 0x65, 0xb1, 0x13, 0x39, 0xa5, 0x6b, 0xa2, 0x48, 0xe8, 0x4d, 0x71, 0x69, 0xca, 0x84, 0xab, 0xe1, 0xef, 0x13, 0x97, 0x38, 0xa9, 0xf9, 0xb1, 0x5b, 0x12, 0xd6, 0x9b, 0xff, 0x4c, 0xf1, 0x15, 0x90, 0xbc, 0x30, 0x13, 0x7, 0x4f, 0x7a, 0x79, 0xfb, 0x80, 0xbc, 0xe3, 0xbe, 0xd0, 0x6c, 0xd3, 0x5b, 0x25, 0x49, 0x2b, 0xb0, 0x29, 0x62, 0x2e, 0x3b, 0x2, 0x3, 0x1, 0x0, 0x1, 0xa3, 0x53, 0x30, 0x51, 0x30, 0xf, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x5, 0x30, 0x3, 0x1, 0x1, 0xff, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x1d, 0xe, 0x4, 0x16, 0x4, 0x14, 0x4c, 0xab, 0x93, 0x18, 0xdf, 0x33, 0x52, 0x3f, 0x1b, 0xda, 0xd, 0xd5, 0xb3, 0xd7, 0xfd, 0xb, 0xb4, 0x8f, 0x63, 0x74, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x1d, 0x23, 0x4, 0x18, 0x30, 0x16, 0x80, 0x14, 0x56, 0x8a, 0x69, 0x4f, 0x57, 0x95, 0x1, 0x60, 0x51, 0x33, 0xab, 0x2c, 0x84, 0xc7, 0xbc, 0x65, 0x24, 0xe6, 0x62, 0x30, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0x47, 0x5d, 0xaa, 0x5a, 0x34, 0xc7, 0x4c, 0x14, 0xf8, 0xd3, 0x7f, 0x80, 0xf9, 0xf9, 0xb6, 0x70, 0xb4, 0xac, 0x32, 0x5e, 0xd7, 0xc, 0xbb, 0xf8, 0x84, 0xb9, 0xf7, 0x75, 0xc9, 0xab, 0x93, 0x15, 0x2c, 0x46, 0xd1, 0x23, 0x2c, 0x56, 0x99, 0xf6, 0x2a, 0x1b, 0x28, 0x89, 0xfe, 0xc5, 0x42, 0x16, 0x3f, 0x5b, 0x47, 0xf1, 0x15, 0xfb, 0x17, 0xbd, 0xb1, 0xa1, 0xa5, 0xc3, 0x96, 0xad, 0xfc, 0xaa, 0x6b, 0xc5, 0xf9, 0xb3, 0x30, 0x9, 0x9d, 0x3d, 0xad, 0x40, 0xc8, 0x52, 0x20, 0xc6, 0x18, 0xf6, 0x40, 0x49, 0xba, 0xa9, 0x3d, 0xa7, 0xee, 0x5d, 0xf0, 0x65, 0x89, 0x47, 0x6a, 0x6f, 0x10, 0x77, 0xc5, 0xb8, 0x7c, 0x7e, 0x1f, 0x33, 0x40, 0x8c, 0x16, 0x85, 0x8e, 0xdc, 0x37, 0xd0, 0x61, 0xc1, 0x5f, 0xff, 0x27, 0x62, 0x58, 0x1a, 0xe3, 0x4f, 0xd2, 0xfd, 0x5d, 0x92, 0x7, 0xb6, 0xbc, 0x6d, 0x61, 0x39, 0x37, 0x7b, 0xa2, 0x9e, 0x6f, 0x1c, 0xb3, 0x55, 0xee, 0x3c, 0x59, 0xf2, 0xb6, 0x26, 0xd8, 0x45, 0x5d, 0xbc, 0x4c, 0xb8, 0x7c, 0xa0, 0x8b, 0x63, 0x7f, 0x67, 0x2f, 0x8f, 0xbd, 0x4b, 0x1b, 0x72, 0x58, 0x9b, 0x80, 0xa0, 0x5b, 0x4, 0xbd, 0xc7, 0xc6, 0x71, 0x15, 0xf5, 0x3e, 0xbc, 0xf9, 0x84, 0xc3, 0x5b, 0x2, 0x1f, 0x73, 0xcd, 0x6a, 0x90, 0x2d, 0xaa, 0x32, 0xd9, 0xe7, 0x3c, 0x88, 0xbc, 0x43, 0xa5, 0x2f, 0xcc, 0xe4, 0x1f, 0xc4, 0x18, 0x78, 0xe2, 0x6c, 0x23, 0x99, 0xd7, 0x6, 0x98, 0x7e, 0xa5, 0x66, 0x75, 0x45, 0xf3, 0x73, 0xa5, 0x6, 0xda, 0x54, 0xda, 0x9, 0x76, 0x29, 0x87, 0x5c, 0x8a, 0xe9, 0x8f, 0x8, 0x16, 0xa4, 0x6e, 0xe8, 0xbf, 0x24, 0xc5, 0x19, 0x14, 0xf8, 0x77, 0x5b, 0x45, 0xef, 0x1e, 0x34, 0x44, 0x6f, 0x4d, 0x11, 0x99, 0xff, 0x39, 0xd3, 0x1c, 0x31, 0x82, 0x1, 0xa1, 0x30, 0x82, 0x1, 0x9d, 0x2, 0x1, 0x1, 0x30, 0x2f, 0x30, 0x23, 0x31, 0x21, 0x30, 0x1f, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2, 0x8, 0x62, 0x9c, 0x6b, 0xc0, 0x68, 0x88, 0x95, 0x68, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1, 0xa0, 0x81, 0xe4, 0x30, 0x18, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x3, 0x31, 0xb, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x7, 0x1, 0x30, 0x1c, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x5, 0x31, 0xf, 0x17, 0xd, 0x32, 0x31, 0x30, 0x39, 0x31, 0x36, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x2f, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0x4, 0x31, 0x22, 0x4, 0x20, 0x2d, 0x2d, 0xa1, 0x96, 0x5, 0xa3, 0x4e, 0x3, 0x7d, 0xbe, 0x82, 0x17, 0x3f, 0x98, 0xa9, 0x92, 0xa5, 0x30, 0xa5, 0xfd, 0xd5, 0x3d, 0xad, 0x88, 0x2f, 0x57, 0xd, 0x4b, 0xa2, 0x4, 0xef, 0x30, 0x30, 0x79, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x9, 0xf, 0x31, 0x6c, 0x30, 0x6a, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2a, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x16, 0x30, 0xb, 0x6, 0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x1, 0x2, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x7, 0x30, 0xe, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x2, 0x0, 0x80, 0x30, 0xd, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x1, 0x40, 0x30, 0x7, 0x6, 0x5, 0x2b, 0xe, 0x3, 0x2, 0x7, 0x30, 0xd, 0x6, 0x8, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x3, 0x2, 0x2, 0x1, 0x28, 0x30, 0xa, 0x6, 0x8, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x4, 0x3, 0x2, 0x4, 0x67, 0x30, 0x65, 0x2, 0x30, 0x2f, 0xf6, 0xb0, 0xb7, 0x2e, 0x84, 0xa7, 0x33, 0xbf, 0xad, 0x17, 0xd6, 0xa0, 0xe6, 0x16, 0x81, 0x18, 0x77, 0xaa, 0x79, 0xd8, 0x8a, 0xbd, 0x27, 0xc9, 0xe6, 0x1d, 0xeb, 0x96, 0xdb, 0xd4, 0x3d, 0xd7, 0x55, 0xb3, 0xef, 0xd7, 0x9f, 0x29, 0x16, 0x2c, 0x8d, 0xbf, 0x25, 0xba, 0xfe, 0x2f, 0x1b, 0x2, 0x31, 0x0, 0xbc, 0x93, 0x3d, 0x95, 0x18, 0x10, 0xdf, 0x66, 0xb2, 0xc4, 0x3e, 0x8, 0xfa, 0xd8, 0x9d, 0x47, 0xa3, 0xa8, 0x4a, 0x24, 0xb8, 0xd5, 0xdd, 0x32, 0x84, 0x6f, 0x8d, 0x2b, 0xbd, 0xb1, 0x2, 0xfd, 0xa6, 0x21, 0xb1, 0x4, 0xee, 0x55, 0xc6, 0x46, 0xc0, 0xfd, 0x21, 0xaa, 0xcf, 0xe6, 0x2a, 0xa4}
	certBytes := []byte{0x30, 0x82, 0x2, 0xea, 0x30, 0x82, 0x1, 0xd2, 0xa0, 0x3, 0x2, 0x1, 0x2, 0x2, 0x8, 0x52, 0x96, 0x35, 0x33, 0xd5, 0x4a, 0xea, 0xa4, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x1e, 0x17, 0xd, 0x37, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0xd, 0x33, 0x31, 0x30, 0x39, 0x31, 0x34, 0x31, 0x30, 0x33, 0x30, 0x33, 0x38, 0x5a, 0x30, 0x1b, 0x31, 0x19, 0x30, 0x17, 0x6, 0x3, 0x55, 0x4, 0x3, 0x13, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x1, 0x22, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0x1, 0x5, 0x0, 0x3, 0x82, 0x1, 0xf, 0x0, 0x30, 0x82, 0x1, 0xa, 0x2, 0x82, 0x1, 0x1, 0x0, 0xe3, 0x2a, 0x2f, 0xf1, 0x8c, 0xd7, 0x1f, 0x67, 0x5c, 0x8f, 0x58, 0x73, 0xdf, 0xb3, 0xd6, 0xff, 0x3d, 0x5a, 0xb2, 0x2f, 0x17, 0xec, 0xad, 0x3d, 0x91, 0xb1, 0xb7, 0xa5, 0x3c, 0x72, 0xd8, 0x14, 0x9b, 0xb4, 0x6d, 0x67, 0x14, 0xe9, 0xe8, 0xd0, 0xfd, 0x8c, 0x54, 0xd5, 0xe0, 0xec, 0xe4, 0x74, 0xec, 0x27, 0x9, 0x50, 0xe8, 0x2c, 0x7e, 0x2, 0x4e, 0x20, 0xaa, 0xb3, 0xa, 0x16, 0x9b, 0xb0, 0xc8, 0xf2, 0xe7, 0x50, 0x7b, 0x97, 0xf6, 0xe, 0x99, 0xcb, 0x6, 0x7c, 0xbe, 0x7, 0xe9, 0x30, 0x12, 0x38, 0xde, 0x52, 0xbd, 0xd8, 0x9a, 0xc5, 0x19, 0x56, 0xc7, 0x48, 0x7a, 0xe6, 0x41, 0x9, 0xce, 0xf7, 0x22, 0xcc, 0xcb, 0x70, 0x9, 0xbf, 0x7c, 0xdb, 0x0, 0x8e, 0x9a, 0xc8, 0x8a, 0xb1, 0x9b, 0x1, 0xf8, 0x45, 0xbd, 0x5, 0x75, 0x7b, 0x2b, 0x6f, 0x9b, 0x6, 0x1d, 0x2, 0xb9, 0x64, 0x19, 0xa1, 0xef, 0x72, 0x83, 0xae, 0xdf, 0x8, 0xc, 0xb, 0x70, 0x4, 0x6, 0xaa, 0x96, 0xb8, 0x80, 0x4f, 0xc6, 0xcf, 0xa1, 0xd3, 0xe3, 0x4, 0x7c, 0x4a, 0xa2, 0x8c, 0x3c, 0x7c, 0xd9, 0xe5, 0x88, 0x4e, 0xd6, 0x77, 0x13, 0xb7, 0xd6, 0xe4, 0xc0, 0x23, 0xa1, 0xe0, 0xae, 0xa5, 0x59, 0xb7, 0xe2, 0xb2, 0xe0, 0xa2, 0x75, 0xf6, 0x8a, 0xf8, 0xc6, 0x4f, 0xb1, 0x4c, 0x64, 0x27, 0x77, 0x34, 0x7b, 0x1b, 0x13, 0xe6, 0x6c, 0xa5, 0xa5, 0xf4, 0xc9, 0xcb, 0xd2, 0x37, 0xea, 0x5e, 0xcb, 0x37, 0x4f, 0xfe, 0x18, 0x5c, 0xd9, 0x59, 0xbc, 0xd8, 0x8a, 0x6b, 0x6a, 0x46, 0x42, 0xe1, 0x44, 0x6, 0xe, 0x52, 0xbe, 0x29, 0x39, 0x64, 0x67, 0x64, 0x64, 0xa3, 0x69, 0x35, 0x54, 0x61, 0xb2, 0x46, 0xf9, 0xb7, 0x47, 0xf3, 0x61, 0x1f, 0x6, 0x38, 0xf9, 0x81, 0xef, 0x57, 0xe6, 0xa3, 0x6b, 0x3b, 0x2, 0x3, 0x1, 0x0, 0x1, 0xa3, 0x32, 0x30, 0x30, 0x30, 0xf, 0x6, 0x3, 0x55, 0x1d, 0x13, 0x1, 0x1, 0xff, 0x4, 0x5, 0x30, 0x3, 0x1, 0x1, 0xff, 0x30, 0x1d, 0x6, 0x3, 0x55, 0x1d, 0xe, 0x4, 0x16, 0x4, 0x14, 0x56, 0x8a, 0x69, 0x4f, 0x57, 0x95, 0x1, 0x60, 0x51, 0x33, 0xab, 0x2c, 0x84, 0xc7, 0xbc, 0x65, 0x24, 0xe6, 0x62, 0x30, 0x30, 0xd, 0x6, 0x9, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0xd, 0x1, 0x1, 0xb, 0x5, 0x0, 0x3, 0x82, 0x1, 0x1, 0x0, 0x9d, 0xba, 0x4c, 0x60, 0x65, 0xa, 0xe9, 0xd8, 0x62, 0x83, 0xb9, 0x4c, 0xe1, 0xc4, 0x50, 0x77, 0x8e, 0xd9, 0xe2, 0xc2, 0x5f, 0x6e, 0xc4, 0xc3, 0xcc, 0x57, 0x36, 0x27, 0x9d, 0xa5, 0xe5, 0x7f, 0xc7, 0xd8, 0x3b, 0xe4, 0x41, 0x7f, 0xb0, 0xf, 0x5, 0xfb, 0x49, 0x52, 0x47, 0xf8, 0x87, 0x22, 0x35, 0x0, 0x66, 0xea, 0x44, 0xd, 0x59, 0x22, 0x6b, 0x3, 0x42, 0xa3, 0xed, 0xe, 0xc7, 0xf4, 0xa4, 0xdb, 0x7c, 0x6a, 0x48, 0xe5, 0xf7, 0x57, 0x39, 0x4d, 0x27, 0x4b, 0x45, 0x91, 0x2d, 0x8, 0x6d, 0x53, 0xf, 0x3b, 0x4e, 0x3, 0x67, 0xdb, 0xd, 0x5c, 0x5b, 0x81, 0x75, 0xd3, 0x3d, 0x12, 0x4d, 0x2, 0x4c, 0xb3, 0xfc, 0x40, 0x31, 0xe7, 0xbc, 0xd1, 0xc9, 0x5f, 0x4a, 0xfe, 0x36, 0x5b, 0xf4, 0x7b, 0x6, 0xba, 0xab, 0xe2, 0x49, 0xb2, 0x5d, 0x6b, 0xc2, 0x1a, 0xd9, 0x81, 0x9, 0x75, 0x2a, 0x81, 0x31, 0xa6, 0x4e, 0x71, 0xda, 0xe1, 0x4e, 0x11, 0x20, 0x75, 0x5a, 0xd9, 0x64, 0xa2, 0x3e, 0x8c, 0xe4, 0x6c, 0xb5, 0x6c, 0xe7, 0xc5, 0xc9, 0x57, 0xe3, 0x60, 0x8f, 0x4f, 0x5a, 0x86, 0x7f, 0x39, 0x22, 0x36, 0xc2, 0xda, 0xe8, 0xc2, 0xa2, 0x1b, 0x1b, 0xc1, 0x62, 0xa, 0xb0, 0xe6, 0x30, 0x95, 0x97, 0xb9, 0xda, 0x41, 0x33, 0x0, 0x16, 0xde, 0x44, 0x4b, 0x7e, 0xf5, 0x29, 0x70, 0xd8, 0x88, 0x4f, 0x92, 0xb6, 0x81, 0x71, 0xd9, 0x9d, 0xad, 0x92, 0x51, 0x71, 0x84, 0x22, 0x58, 0xa8, 0x90, 0x7d, 0xec, 0x3b, 0xc5, 0x99, 0xcf, 0x92, 0x4e, 0x6b, 0x3d, 0xd7, 0x6a, 0x53, 0x17, 0x59, 0x2e, 0x26, 0x53, 0x79, 0xd6, 0xb, 0x5a, 0x7a, 0xd5, 0x58, 0xd5, 0x46, 0x72, 0x81, 0xf5, 0xeb, 0x5b, 0x4f, 0x1c, 0x68, 0x35, 0xc5, 0x54, 0x82, 0xc2, 0x56, 0x8b, 0x71, 0x62, 0x7e, 0x3b}

	fmt.Printf("\n%q\n", base64.StdEncoding.EncodeToString(detachedSig))

	cms, err := cms.New()
	if err != nil {
		t.Error(err)
	}
	cert, err := x509.ParseCertificate(certBytes)
	cms.Intermediate.AddCert(cert)

	_, err = cms.Verify(detachedSig)
	if err != nil {
		t.Error(err)
	}
}

func TestSignerIdentifier(t *testing.T) {
	issuerName := pkix.Name{
		Country:            []string{"HU"},
		Organization:       []string{"TestOrg"},
		OrganizationalUnit: nil,
		Locality:           nil,
		Province:           nil,
		StreetAddress:      nil,
		PostalCode:         nil,
		SerialNumber:       "",
		CommonName:         "TestCA",
		Names:              nil,
		ExtraNames:         nil,
	}

	rdnseq := issuerName.ToRDNSequence()
	asn1issuer, err := asn1.Marshal(rdnseq)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("ASN1 issuer b64=%s", base64.StdEncoding.EncodeToString(asn1issuer))
	var rawValue asn1.RawValue
	_, err = asn1.Unmarshal(asn1issuer, &rawValue)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("RawValue = %#v", rawValue)

	var rdnSeq2 pkix.RDNSequence
	_, err = asn1.Unmarshal(asn1issuer, &rdnSeq2)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("RDNSequence = %#v", rdnSeq2)

}
